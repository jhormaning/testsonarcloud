
--------------------------------------------------------
--  DDL for Package PKG_CONSULTA
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE &1.."PKG_CONSULTA" IS

  -- Declaración del procedimiento SPS_CONSULTA_TRANSACCION
PROCEDURE SPS_CONSULTA_TRANSACCION(
		OUT_CURSOR OUT SYS_REFCURSOR,
        OUT_CODIGO OUT VARCHAR2,
        OUT_MENSAJE OUT VARCHAR2,
        OUT_TOTAL_DATA OUT INTEGER,
        IN_PAGE IN NUMBER,
        IN_SIZE IN NUMBER,
        IN_ID_CUENTA IN VARCHAR2,
        IN_TRANSACCION_ID IN VARCHAR2,
        IN_FECHA_INICIAL IN DATE,
        IN_FECHA_FINAL IN DATE,
        IN_ESTADO_RESPUESTA IN NUMBER,
        IN_COD_TIPO_QR IN VARCHAR2,
        IN_COD_OPERACION IN VARCHAR2,
        IN_COD_ENTIDAD IN VARCHAR2
      );

  -- Declaración del procedimiento SPS_CONSULTA_COMERCIANTE

  PROCEDURE SPS_CONSULTA_COMERCIANTE(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_COMERCIANTE IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
  );

  -- Declaración del procedimiento SPS_CONSULTA_MONEDA	
   PROCEDURE SPS_CONSULTA_MONEDA(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_MONEDA IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
  );
   -- Declaración del procedimiento SPS_CONSULTA_ENTIDAD   
   PROCEDURE SPS_CONSULTA_ENTIDAD (
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE        IN INTEGER,
    IN_SIZE        IN INTEGER,
    IN_ID_ENTIDAD IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
    );
	
   -- Declaración del procedimiento SPS_OBTENER_PARAMETRO   
    PROCEDURE SPS_OBTENER_PARAMETRO (
		OUT_CURSOR          OUT SYS_REFCURSOR,
		OUT_CODIGO     OUT VARCHAR2,
        OUT_MENSAJE     OUT VARCHAR2,
        OUT_TOTAL_DATA     OUT INTEGER,
        IN_PAGE            IN INTEGER,
        IN_SIZE            IN INTEGER,
        IN_ID_GRUPO_PARAMETRO IN VARCHAR2,
        IN_ID_DETALLE_PARAMETRO    IN VARCHAR2,
        IN_ESTADO          IN VARCHAR2     
    );
  -- Declaración del procedimiento SPS_OBTENER_DETALLE_PARAMETRO
    PROCEDURE SPS_OBTENER_DETALLE_PARAMETRO (
		OUT_CURSOR       OUT SYS_REFCURSOR,
		OUT_CODIGO  OUT VARCHAR2,
        OUT_MENSAJE  OUT VARCHAR2,
        IN_ID_PARAMETRO IN INTEGER
    );
  -- Declaración del procedimiento SPS_OBTENER_GRUPO_PARAMETRO
    PROCEDURE SPS_OBTENER_GRUPO_PARAMETRO (
        OUT_CURSOR          OUT SYS_REFCURSOR,
		OUT_CODIGO     OUT VARCHAR2,
        OUT_MENSAJE     OUT VARCHAR2,
        OUT_TOTAL_DATA     OUT INTEGER,
		IN_PAGE            IN INTEGER,
        IN_SIZE            IN INTEGER,
        IN_ID_GRUPO_PARAMETRO IN INTEGER,
        IN_CODIGO IN VARCHAR2,
        IN_ESTADO          IN VARCHAR2
    );
	-- Declaración del procedimiento SPS_CONSULTA_TYPEQR
	PROCEDURE SPS_CONSULTA_TYPEQR(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_TYPEQR IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
	);
-- Declaración del procedimiento SPS_CONSULTA_TIPOQR
	PROCEDURE SPS_CONSULTA_TIPOQR(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_TIPOQR IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
	);

    FUNCTION FUN_OBTENER_DESC_ENTIDAD(
        p_id_entidad IN tp_entidad.cod_entidad%TYPE
      ) RETURN tp_entidad.desc_entidad%TYPE;

       FUNCTION FUN_OBTENER_DESC_OPERACION(
        p_cod_operacion IN tp_operacion.cod_operacion%TYPE
      ) RETURN tp_operacion.desc_operacion%TYPE;

        FUNCTION FUN_OBTENER_CANAL(
        p_cod_canal IN tp_canal.cod_canal%TYPE
      ) RETURN tp_canal.desc_canal%TYPE;

    FUNCTION FUN_OBTENER_TIPOQR(
        p_cod_tipo_qr IN tp_tipo_qr.cod_tipo_qr%TYPE
      ) RETURN tp_tipo_qr.desc_tipo_qr%TYPE;
	  
    FUNCTION FUN_OBTENER_ESTADO_RESPUESTA(
        p_estado_respuesta IN tp_transaccion_log.estado_respuesta%TYPE
      ) RETURN tp_transaccion_log.usuario%TYPE;
END PKG_CONSULTA;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CONSULTA
--------------------------------------------------------
CREATE OR REPLACE PACKAGE BODY &1.."PKG_CONSULTA" IS

    /********FUN_OBTENER_DESC_ENTIDAD***************/
    FUNCTION FUN_OBTENER_DESC_ENTIDAD(
        p_id_entidad IN tp_entidad.cod_entidad%TYPE
      ) RETURN tp_entidad.desc_entidad%TYPE IS

        l_descripcion tp_entidad.desc_entidad%TYPE;
      BEGIN

        SELECT desc_entidad
        INTO l_descripcion
        FROM tp_entidad
        WHERE cod_entidad = p_id_entidad;


        RETURN l_descripcion;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL; 
        WHEN OTHERS THEN
          RETURN NULL; 
      END FUN_OBTENER_DESC_ENTIDAD;

          /********FUN_OBTENER_ESTADO_RESPUESTA***************/
    FUNCTION FUN_OBTENER_ESTADO_RESPUESTA(
        p_estado_respuesta IN tp_transaccion_log.estado_respuesta%TYPE
      ) RETURN tp_transaccion_log.usuario%TYPE IS

        l_descripcion tp_transaccion_log.usuario%TYPE;
      BEGIN

        RETURN CASE
          p_estado_respuesta
          WHEN 0 THEN 'Transacción OK'
          WHEN 98 THEN 'Error Técnico'
          WHEN 99 THEN 'Error Operativo'
          ELSE 'Otros'
          END;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL; 
        WHEN OTHERS THEN
          RETURN NULL; 
      END FUN_OBTENER_ESTADO_RESPUESTA;

      /********FUN_OBTENER_DESC_OPERACION***************/
       FUNCTION FUN_OBTENER_DESC_OPERACION(
        p_cod_operacion IN tp_operacion.cod_operacion%TYPE
      ) RETURN tp_operacion.desc_operacion%TYPE IS

        l_descripcion tp_operacion.desc_operacion%TYPE;
      BEGIN

        SELECT desc_operacion
        INTO l_descripcion
        FROM tp_operacion
        WHERE cod_operacion = p_cod_operacion;


        RETURN l_descripcion;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL; 
        WHEN OTHERS THEN
          RETURN NULL; 
      END FUN_OBTENER_DESC_OPERACION;

    /********FUN_OBTENER_CANAL***************/

        FUNCTION FUN_OBTENER_CANAL(
        p_cod_canal IN tp_canal.cod_canal%TYPE
      ) RETURN tp_canal.desc_canal%TYPE IS

        l_descripcion tp_canal.desc_canal%TYPE;
      BEGIN

        SELECT desc_canal
        INTO l_descripcion
        FROM tp_canal
        WHERE cod_canal = p_cod_canal;


        RETURN l_descripcion;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL; 
        WHEN OTHERS THEN
          RETURN NULL; 
      END FUN_OBTENER_CANAL;

    --FALTANDO TIPO_QR FUNCION 
    /********FUN_OBTENER_TIPOQR***************/

    FUNCTION FUN_OBTENER_TIPOQR(
        p_cod_tipo_qr IN tp_tipo_qr.cod_tipo_qr%TYPE
      ) RETURN tp_tipo_qr.desc_tipo_qr%TYPE IS
        l_descripcion tp_tipo_qr.desc_tipo_qr%TYPE;
      BEGIN

        SELECT desc_tipo_qr
        INTO l_descripcion
        FROM tp_tipo_qr
        WHERE cod_tipo_qr = p_cod_tipo_qr;


        RETURN l_descripcion;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL; 
        WHEN OTHERS THEN
          RETURN NULL; 
      END FUN_OBTENER_TIPOQR;


       PROCEDURE SPS_CONSULTA_TRANSACCION(
		OUT_CURSOR OUT SYS_REFCURSOR,
        OUT_CODIGO OUT VARCHAR2,
        OUT_MENSAJE OUT VARCHAR2,
        OUT_TOTAL_DATA OUT INTEGER,
        IN_PAGE IN NUMBER,
        IN_SIZE IN NUMBER,
        IN_ID_CUENTA IN VARCHAR2,
        IN_TRANSACCION_ID IN VARCHAR2,
        IN_FECHA_INICIAL IN DATE,
        IN_FECHA_FINAL IN DATE,
        IN_ESTADO_RESPUESTA IN NUMBER,
        IN_COD_TIPO_QR IN VARCHAR2,
        IN_COD_OPERACION IN VARCHAR2,
        IN_COD_ENTIDAD IN VARCHAR2
      ) IS
		select_sql VARCHAR2(1000); -- Tamaño del query dinámico
        select_sql_inicio VARCHAR2(100);
        select_sql_total VARCHAR2(1000);
        v_sql  VARCHAR2(3000);

      BEGIN
        -- Construyendo el query dinámico
        select_sql_inicio := 'WITH TXN AS (';
        select_sql := 'SELECT ROW_NUMBER() OVER (ORDER BY FECHA_REGISTRO_TRANSACCION DESC) AS ROWCOUNT,ID_CUENTA,COD_ENTIDAD, COD_OPERACION,
        COD_CANAL, COD_TIPO_QR,FECHA_REGISTRO_TRANSACCION,ESTADO_RESPUESTA FROM TP_TRANSACCION_LOG
        WHERE 1=1';

		IF IN_ID_CUENTA IS NOT NULL THEN
		  select_sql := select_sql || ' AND ID_CUENTA
     = ''' || IN_ID_CUENTA || '''';
		END IF;
        -- Agregando condiciones según los parámetros de entrada
        IF IN_TRANSACCION_ID IS NOT NULL THEN
          select_sql := select_sql || ' AND TRANSACCION_ID
     = ''' || IN_TRANSACCION_ID || '''';
        END IF;

        IF IN_FECHA_INICIAL IS NOT NULL AND IN_FECHA_FINAL IS NOT NULL THEN
          select_sql := select_sql || ' AND FECHA_REGISTRO_TRANSACCION
    BETWEEN ''' || IN_FECHA_INICIAL ||''' AND TO_DATE(''' || IN_FECHA_FINAL || ''')';
        END IF;

            IF IN_COD_ENTIDAD IS NOT NULL THEN
          select_sql := select_sql || ' AND COD_ENTIDAD
     = ''' || IN_COD_ENTIDAD || '''';
        END IF;

        IF IN_COD_OPERACION IS NOT NULL THEN
          select_sql := select_sql || ' AND COD_OPERACION
     = ''' || IN_COD_OPERACION || '''';
        END IF;

        IF IN_ESTADO_RESPUESTA IS NOT NULL THEN
          select_sql := select_sql || ' AND ESTADO_RESPUESTA
     = ''' || IN_ESTADO_RESPUESTA || '''';
        END IF;

        IF IN_COD_TIPO_QR IS NOT NULL THEN
          select_sql := select_sql || ' AND COD_TIPO_QR = ''' || IN_COD_TIPO_QR || '''';
        END IF;

        select_sql_total := select_sql;


        select_sql := select_sql_inicio || select_sql ;
        --Se inserta el paginado
        IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
        select_sql := select_sql || ' ORDER BY FECHA_REGISTRO_TRANSACCION DESC OFFSET '||IN_PAGE||' ROWS FETCH NEXT  '||IN_SIZE || ' ROWS ONLY';
        ELSE
        select_sql := select_sql || ' ORDER BY FECHA_REGISTRO_TRANSACCION DESC OFFSET 0 ROWS FETCH NEXT 1000 ROWS ONLY';
        END IF;

        select_sql := select_sql || ') SELECT ROWCOUNT,ID_CUENTA,PKG_CONSULTA.FUN_OBTENER_DESC_ENTIDAD(COD_ENTIDAD),PKG_CONSULTA.FUN_OBTENER_DESC_OPERACION(COD_OPERACION),
        PKG_CONSULTA.FUN_OBTENER_CANAL(COD_CANAL), PKG_CONSULTA.FUN_OBTENER_TIPOQR(COD_TIPO_QR), FECHA_REGISTRO_TRANSACCION, PKG_CONSULTA.FUN_OBTENER_ESTADO_RESPUESTA(ESTADO_RESPUESTA) FROM TXN';

        select_sql := select_sql || ' ORDER BY FECHA_REGISTRO_TRANSACCION DESC';

        DBMS_OUTPUT.PUT_LINE(select_sql);

        v_sql := 'SELECT COUNT(1) FROM (' || select_sql_total || ')';


        EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;
        OPEN OUT_CURSOR FOR select_sql;
        OUT_CODIGO := '00';
        OUT_MENSAJE := 'Consulta realizada correctamente';

      EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        OUT_CODIGO := '01';
        OUT_MENSAJE := sqlcode || '.'||SQLERRM;
          IF OUT_CURSOR IS NOT NULL THEN
            CLOSE OUT_CURSOR;
        END IF;
      END SPS_CONSULTA_TRANSACCION;

 PROCEDURE SPS_CONSULTA_MONEDA(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_MONEDA IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
	) IS

	select_sql VARCHAR2(500);
	select_sql_total VARCHAR2(500);
	V_SQL VARCHAR2(500);

	BEGIN

	select_sql := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_MONEDA DESC) AS ROWCOUNT, ID_MONEDA,COD_MONEDA,DESC_MONEDA,SIMBOLO_MONEDA,ESTADO,FEC_CREACION,FEC_MODIFICACION,USU_CREACION,USU_MODIFICACION FROM TP_MONEDA WHERE 1=1';

    IF IN_ID_MONEDA IS NOT NULL THEN
    select_sql := select_sql || ' AND ID_MONEDA= ''' || IN_ID_MONEDA || '''';
    END IF;

	IF IN_CODIGO IS NOT NULL THEN
	select_sql := select_sql || ' AND COD_MONEDA= ''' || IN_CODIGO || '''';
	END IF;

	IF IN_ESTADO IS NOT NULL THEN
	select_sql := select_sql || ' AND ESTADO= ''' || IN_ESTADO || '''';
	END IF;

	select_sql_total := select_sql;

	IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
	select_sql := select_sql || ' ORDER BY ID_MONEDA DESC OFFSET '||IN_PAGE||' ROWS FETCH NEXT  '|| IN_SIZE || ' ROWS ONLY';
	END IF;

	DBMS_OUTPUT.PUT_LINE(select_sql);

	v_sql := 'SELECT COUNT(1) FROM (' || select_sql_total || ')';
	EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;
    OPEN OUT_CURSOR FOR select_sql;
    OUT_CODIGO := '00';
    OUT_MENSAJE := 'Consulta realizada correctamente';
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    OUT_CODIGO := '01';
    OUT_MENSAJE := sqlcode || '.'||SQLERRM;
      IF OUT_CURSOR IS NOT NULL THEN
        CLOSE OUT_CURSOR;
    END IF;

    END SPS_CONSULTA_MONEDA;

PROCEDURE SPS_CONSULTA_COMERCIANTE(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_COMERCIANTE IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
)
 IS

	select_sql VARCHAR2(500);
	select_sql_total VARCHAR2(500);
	V_SQL VARCHAR2(500);

	BEGIN

	select_sql := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_COMERCIANTE DESC) AS ROWCOUNT, ID_COMERCIANTE,COD_COMERCIANTE,DESC_COMERCIANTE,ESTADO,FEC_CREACION,FEC_MODIFICACION,USU_CREACION,USU_MODIFICACION FROM TP_COMERCIANTE WHERE 1=1';

    IF IN_ID_COMERCIANTE IS NOT NULL THEN
    select_sql := select_sql || ' AND ID_COMERCIANTE= ''' || IN_ID_COMERCIANTE || '''';
    END IF;

	IF IN_CODIGO IS NOT NULL THEN
	select_sql := select_sql || ' AND COD_COMERCIANTE= ''' || IN_CODIGO || '''';
	END IF;

	IF IN_ESTADO IS NOT NULL THEN
	select_sql := select_sql || ' AND ESTADO= ''' || IN_ESTADO || '''';
	END IF;

	select_sql_total := select_sql;

	IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
	select_sql := select_sql || ' ORDER BY ID_COMERCIANTE DESC OFFSET '||IN_PAGE||' ROWS FETCH NEXT  '|| IN_SIZE || ' ROWS ONLY';
	END IF;

	--DBMS_OUTPUT.PUT_LINE(select_sql);

	v_sql := 'SELECT COUNT(1) FROM (' || select_sql_total || ')';
	EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;
    OPEN OUT_CURSOR FOR select_sql;
    OUT_CODIGO := '00';
    OUT_MENSAJE := 'Consulta realizada correctamente';
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    OUT_CODIGO := '01';
    OUT_MENSAJE := sqlcode || '.'||SQLERRM;
      IF OUT_CURSOR IS NOT NULL THEN
        CLOSE OUT_CURSOR;
    END IF;

    END SPS_CONSULTA_COMERCIANTE;

PROCEDURE SPS_CONSULTA_TIPOQR(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_TIPOQR IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
)
 IS

	select_sql VARCHAR2(500);
	select_sql_total VARCHAR2(500);
	V_SQL VARCHAR2(500);

	BEGIN

	select_sql := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_TIPO_QR DESC) AS ROWCOUNT, ID_TIPO_QR,COD_TIPO_QR,DESC_TIPO_QR,ESTADO,FEC_CREACION,FEC_MODIFICACION,USU_CREACION,USU_MODIFICACION FROM TP_TIPO_QR WHERE 1=1';

    IF IN_ID_TIPOQR IS NOT NULL THEN
    select_sql := select_sql || ' AND ID_TIPO_QR= ''' || IN_ID_TIPOQR || '''';
    END IF;

	IF IN_CODIGO IS NOT NULL THEN
	select_sql := select_sql || ' AND COD_TIPO_QR= ''' || IN_CODIGO || '''';
	END IF;

	IF IN_ESTADO IS NOT NULL THEN
	select_sql := select_sql || ' AND ESTADO= ''' || IN_ESTADO || '''';
	END IF;

	select_sql_total := select_sql;

	IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
	select_sql := select_sql || ' ORDER BY ID_TIPO_QR DESC OFFSET '||IN_PAGE||' ROWS FETCH NEXT  '|| IN_SIZE || ' ROWS ONLY';
	END IF;

	--DBMS_OUTPUT.PUT_LINE(select_sql);

	v_sql := 'SELECT COUNT(1) FROM (' || select_sql_total || ')';
	EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;
    OPEN OUT_CURSOR FOR select_sql;
    OUT_CODIGO := '00';
    OUT_MENSAJE := 'Consulta realizada correctamente';
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    OUT_CODIGO := '01';
    OUT_MENSAJE := sqlcode || '.'||SQLERRM;
      IF OUT_CURSOR IS NOT NULL THEN
        CLOSE OUT_CURSOR;
    END IF;

    END SPS_CONSULTA_TIPOQR;


PROCEDURE SPS_CONSULTA_TYPEQR(
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE IN NUMBER,
    IN_SIZE IN NUMBER,
    IN_ID_TYPEQR IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
)
 IS

	select_sql VARCHAR2(500);
	select_sql_total VARCHAR2(500);
	V_SQL VARCHAR2(500);

	BEGIN

	select_sql := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_TYPE_QR DESC) AS ROWCOUNT, ID_TYPE_QR,COD_TYPE_QR,DESC_TYPE_QR,ESTADO,FEC_CREACION,FEC_MODIFICACION,USU_CREACION,USU_MODIFICACION FROM TP_TYPE_QR WHERE 1=1';

    IF IN_ID_TYPEQR IS NOT NULL THEN
    select_sql := select_sql || ' AND ID_TYPE_QR= ''' || IN_ID_TYPEQR || '''';
    END IF;

	IF IN_CODIGO IS NOT NULL THEN
	select_sql := select_sql || ' AND COD_TYPE_QR= ''' || IN_CODIGO || '''';
	END IF;

	IF IN_ESTADO IS NOT NULL THEN
	select_sql := select_sql || ' AND ESTADO= ''' || IN_ESTADO || '''';
	END IF;

	select_sql_total := select_sql;

	IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
	select_sql := select_sql || ' ORDER BY ID_TYPE_QR DESC OFFSET '||IN_PAGE||' ROWS FETCH NEXT  '|| IN_SIZE || ' ROWS ONLY';
	END IF;

	--DBMS_OUTPUT.PUT_LINE(select_sql);

	v_sql := 'SELECT COUNT(1) FROM (' || select_sql_total || ')';
	EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;
    OPEN OUT_CURSOR FOR select_sql;
    OUT_CODIGO := '00';
    OUT_MENSAJE := 'Consulta realizada correctamente';
    EXCEPTION
    WHEN OTHERS THEN
    ROLLBACK;
    OUT_CODIGO := '01';
    OUT_MENSAJE := sqlcode || '.'||SQLERRM;
      IF OUT_CURSOR IS NOT NULL THEN
        CLOSE OUT_CURSOR;
    END IF;

    END SPS_CONSULTA_TYPEQR;

PROCEDURE SPS_CONSULTA_ENTIDAD
  (
	OUT_CURSOR OUT SYS_REFCURSOR,
	OUT_CODIGO OUT VARCHAR2,
    OUT_MENSAJE OUT VARCHAR2,
    OUT_TOTAL_DATA OUT INTEGER,
    IN_PAGE        IN INTEGER,
    IN_SIZE        IN INTEGER,
    IN_ID_ENTIDAD IN VARCHAR2,
    IN_CODIGO IN VARCHAR2,
    IN_ESTADO IN VARCHAR2
  )
IS
  T_QUERY VARCHAR2(6000);
  T_QUERY_TOTAL VARCHAR2(6000);
  T_QUERY_BASE  VARCHAR2(6000);
  T_QUERY_FINAL VARCHAR2(6000);
  FILT_0 VARCHAR2(100);
  FILT_1 VARCHAR2(100);
  FILT_2 VARCHAR2(100);
  v_sql  VARCHAR2(2000);
BEGIN

    T_QUERY_BASE := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_ENTIDAD DESC) AS ROWCOUNT, e.ID_ENTIDAD, e.COD_ENTIDAD, e.DESC_ENTIDAD, e.ESTADO, e.FEC_CREACION, e.USU_CREACION, e.FEC_MODIFICACION, e.USU_MODIFICACION
        FROM TP_ENTIDAD e
        WHERE e.ID_ENTIDAD IS NOT NULL ';


      IF IN_ID_ENTIDAD IS NOT NULL THEN
        FILT_0 := ' AND e.ID_ENTIDAD = ' || IN_ID_ENTIDAD;
      END IF;

      IF IN_ESTADO IS NOT NULL THEN
        FILT_1 := ' AND e.ESTADO = '''|| IN_ESTADO || '''';
      END IF;

        IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
        T_QUERY_FINAL := ' ORDER BY e.ID_ENTIDAD DESC OFFSET ' || IN_PAGE || ' ROWS FETCH NEXT ' || IN_SIZE || ' ROWS ONLY';    
        END IF;

        T_QUERY := T_QUERY_BASE || FILT_0 || FILT_1 || T_QUERY_FINAL;
        T_QUERY_TOTAL := T_QUERY_BASE || FILT_0 || FILT_1 ;

        DBMS_OUTPUT.PUT_LINE('El query es: ' || T_QUERY);

    OPEN OUT_CURSOR FOR T_QUERY;

    v_sql := 'SELECT COUNT(1) FROM (' || T_QUERY_TOTAL || ')';
    EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;

  OUT_CODIGO := '00';
  OUT_MENSAJE := 'Consulta realizada correctamente';
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  OUT_CODIGO := '01';
  OUT_MENSAJE := SQLCODE||'.'||SQLERRM;
END SPS_CONSULTA_ENTIDAD;

PROCEDURE SPS_OBTENER_GRUPO_PARAMETRO(
        OUT_CURSOR          OUT SYS_REFCURSOR,
		OUT_CODIGO     OUT VARCHAR2,
        OUT_MENSAJE     OUT VARCHAR2,
        OUT_TOTAL_DATA     OUT INTEGER,
		IN_PAGE            IN INTEGER,
        IN_SIZE            IN INTEGER,
        IN_ID_GRUPO_PARAMETRO IN INTEGER,
        IN_CODIGO IN VARCHAR2,
        IN_ESTADO          IN VARCHAR2
)
IS
  T_QUERY VARCHAR2(2000);
  T_QUERY_TOTAL VARCHAR2(2000);
  T_QUERY_BASE  VARCHAR2(2000);
  T_QUERY_FINAL VARCHAR2(500);
  FILT_0 VARCHAR2(100);
  FILT_1 VARCHAR2(100);
  FILT_2 VARCHAR2(100);
  v_sql  VARCHAR2(2000);
BEGIN

    T_QUERY_BASE := 'SELECT ROW_NUMBER() OVER (ORDER BY ID_GRUPO_PARAMETRO DESC) AS ROWCOUNT, tgp.ID_GRUPO_PARAMETRO,tgp.COD_GRUPO_PARAMETRO , tgp.DESC_GRUPO_PARAMETRO , tgp.ESTADO 
					FROM TP_GRUPO_PARAMETRO tgp
					WHERE tgp.ID_GRUPO_PARAMETRO IS NOT NULL ';

        IF (IN_ID_GRUPO_PARAMETRO IS NOT NULL) THEN
          FILT_0 := ' AND tgp.ID_GRUPO_PARAMETRO = ' || IN_ID_GRUPO_PARAMETRO;
        END IF;
        IF (IN_CODIGO IS NOT NULL) THEN
          FILT_1 := ' AND tgp.COD_GRUPO_PARAMETRO = '''|| IN_CODIGO|| '''';
        END IF;
        IF (IN_ESTADO IS NOT NULL) THEN
           FILT_2 := ' AND tgp.ESTADO = ''' || IN_ESTADO || '''';
        END IF;

        IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
        T_QUERY_FINAL := ' ORDER BY tgp.ID_GRUPO_PARAMETRO DESC OFFSET ' || IN_PAGE || ' ROWS FETCH NEXT ' || IN_SIZE || ' ROWS ONLY';
        END IF;

        T_QUERY := T_QUERY_BASE || FILT_0 || FILT_2 || T_QUERY_FINAL;
        T_QUERY_TOTAL := T_QUERY_BASE || FILT_0 || FILT_2;

        --DBMS_OUTPUT.PUT_LINE('El query es: ' || T_QUERY);

    OPEN OUT_CURSOR FOR T_QUERY;

    v_sql := 'SELECT COUNT(1) FROM (' || T_QUERY_TOTAL || ')';
    EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;

  OUT_CODIGO := '00';
  OUT_MENSAJE := 'Consulta realizada correctamente.';
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  OUT_CODIGO := '01';
  OUT_MENSAJE := SQLCODE||'.'||SQLERRM;
END;

PROCEDURE SPS_OBTENER_PARAMETRO(
	OUT_CURSOR          OUT SYS_REFCURSOR,
	OUT_CODIGO     OUT VARCHAR2,
    OUT_MENSAJE     OUT VARCHAR2,
    OUT_TOTAL_DATA     OUT INTEGER,
    IN_PAGE            IN INTEGER,
    IN_SIZE            IN INTEGER,
    IN_ID_GRUPO_PARAMETRO IN VARCHAR2,
    IN_ID_DETALLE_PARAMETRO    IN VARCHAR2,
    IN_ESTADO          IN VARCHAR2     
)
IS
  T_QUERY VARCHAR2(2000);
  T_QUERY_TOTAL VARCHAR2(2000);
  T_QUERY_BASE  VARCHAR2(2000);
  T_QUERY_FINAL VARCHAR2(500);
  FILT_0 VARCHAR2(100);
  FILT_1 VARCHAR2(100);
  FILT_2 VARCHAR2(100);
  v_sql  VARCHAR2(2000);
BEGIN

    T_QUERY_BASE := 'SELECT ROW_NUMBER() OVER (ORDER BY tdp.ID_DETALLE_PARAMETRO DESC) AS ROWCOUNT, tdp.ID_DETALLE_PARAMETRO , tgp.ID_GRUPO_PARAMETRO, tgp.COD_GRUPO_PARAMETRO , tgp.DESC_GRUPO_PARAMETRO , tdp.COD_DETALLE_PARAMETRO , tdp.DESC_DETALLE_PARAMETRO , tdp.ESTADO 
					FROM TP_DETALLE_PARAMETRO tdp 
					INNER JOIN TP_GRUPO_PARAMETRO tgp
					ON tdp.ID_GRUPO_PARAMETRO = tgp.ID_GRUPO_PARAMETRO 
					WHERE tdp.ID_DETALLE_PARAMETRO IS NOT NULL ';

        IF (IN_ID_GRUPO_PARAMETRO IS NOT NULL) THEN
          FILT_0 := ' AND tgp.ID_GRUPO_PARAMETRO = ' || IN_ID_GRUPO_PARAMETRO;
        END IF;
        IF (IN_ID_DETALLE_PARAMETRO IS NOT NULL) THEN
           FILT_1 := ' AND tdp.ID_DETALLE_PARAMETRO = ' || IN_ID_DETALLE_PARAMETRO;
        END IF;
        IF (IN_ESTADO IS NOT NULL) THEN
           FILT_2 := ' AND tdp.ESTADO = ''' || IN_ESTADO || '''';
        END IF;

        IF IN_PAGE IS NOT NULL AND IN_SIZE IS NOT NULL THEN
        T_QUERY_FINAL := ' ORDER BY tdp.ID_DETALLE_PARAMETRO DESC OFFSET ' || IN_PAGE || ' ROWS FETCH NEXT ' || IN_SIZE || ' ROWS ONLY';
        END IF;

        T_QUERY := T_QUERY_BASE || FILT_0 || FILT_1 || FILT_2 || T_QUERY_FINAL;
        T_QUERY_TOTAL := T_QUERY_BASE || FILT_0 || FILT_1 || FILT_2;

        DBMS_OUTPUT.PUT_LINE('El query es: ' || T_QUERY);

    OPEN OUT_CURSOR FOR T_QUERY;

    v_sql := 'SELECT COUNT(1) FROM (' || T_QUERY_TOTAL || ')';
    EXECUTE IMMEDIATE v_sql INTO OUT_TOTAL_DATA;

  OUT_CODIGO := '00';
  OUT_MENSAJE := 'Consulta realizada correctamente.';
  --OUT_MENSAJE := T_QUERY;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  OUT_CODIGO := '01';
  OUT_MENSAJE := SQLCODE||'.'||SQLERRM;
END SPS_OBTENER_PARAMETRO;

PROCEDURE SPS_OBTENER_DETALLE_PARAMETRO(
	OUT_CURSOR       OUT SYS_REFCURSOR,
	OUT_CODIGO  OUT VARCHAR2,
    OUT_MENSAJE  OUT VARCHAR2,
    IN_ID_PARAMETRO IN INTEGER
)  IS

BEGIN

    OPEN OUT_CURSOR FOR

        SELECT tdp.ID_DETALLE_PARAMETRO , tgp.ID_GRUPO_PARAMETRO , tgp.DESC_GRUPO_PARAMETRO , 
        tdp.COD_DETALLE_PARAMETRO , tdp.DESC_DETALLE_PARAMETRO , tdp.ESTADO,
        tdp.USU_CREACION , tdp.FEC_CREACION , tdp.USU_MODIFICACION , tdp.FEC_MODIFICACION 
		FROM TP_DETALLE_PARAMETRO tdp 
		INNER JOIN TP_GRUPO_PARAMETRO tgp
		ON tdp.ID_GRUPO_PARAMETRO = tgp.ID_GRUPO_PARAMETRO
        WHERE tdp.ID_DETALLE_PARAMETRO = IN_ID_PARAMETRO;

  OUT_CODIGO := '00';
  OUT_MENSAJE := 'Consulta realizada correctamente.';
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  OUT_CODIGO := '01';
  OUT_MENSAJE := SQLCODE||'.'||SQLERRM;
END;

    END PKG_CONSULTA;

/
